epengine.documentkeys.DocumentKeysTests:
    # Mad-hatter's Durability tests applicable for magma
    #Covers tests with different key types
    test_dockey_whitespace_data_ops,num_items=1000,replicas=2,nodes_init=4,GROUP=vb512;P0
    test_dockey_binary_data_ops,num_items=1000,replicas=2,nodes_init=4,GROUP=vb512;P0
    test_dockey_unicode_data_ops,num_items=1000,replicas=2,nodes_init=4,GROUP=vb512;P0
    test_dockey_whitespace_views,num_items=1000,replicas=2,nodes_init=4,GROUP=vb512;P0
    test_dockey_binary_views,num_items=1000,replicas=2,nodes_init=4,GROUP=vb512;P0
    test_dockey_unicode_views,num_items=1000,replicas=2,nodes_init=4,GROUP=vb512;P0

    # Max key_length tests
    test_dockey_whitespace_data_ops,num_items=250000,replicas=2,nodes_init=4,key_size=235,GROUP=vb128;P0
    test_dockey_binary_data_ops,num_items=250000,replicas=2,nodes_init=4,key_size=235,GROUP=vb128;P0
    test_dockey_unicode_data_ops,num_items=250000,replicas=2,nodes_init=4,key_size=30,GROUP=vb128;P0

    # Single vbucket test
    test_dockey_whitespace_data_ops,num_items=10000,replicas=2,nodes_init=4,key_size=235,target_vbucket=10,GROUP=vb128;P0


magma.magma_create.BasicCreateTests:
    #Covers tests with different key sizes and mix key sizes,
    #adding docs in descending order, ascending order and random fashion

################################################################################

    # 128 vBuckets
    # 3.5 million items
    # 50 MB per vBucket

    test_basic_create_read,num_items=700000,nodes_init=4,key_size=240,sdk_timeout=60,vbuckets=128,process_concurrency=4,GROUP=vb128;P0
    test_basic_create_read,num_items=700000,nodes_init=4,mix_key_size=True,key_size=20,sdk_timeout=60,vbuckets=128,process_concurrency=4,GROUP=vb128;P0
    test_basic_create_read,num_items=700000,nodes_init=4,random_key=True,key_size=22,sdk_timeout=60,vbuckets=128,deep_copy=True,GROUP=vb128;P0
    test_basic_create_read,num_items=700000,nodes_init=4,key_size=20,randomize_doc_size=True,sdk_timeout=60,vbuckets=128,GROUP=vb128;P0
    test_basic_create_read,num_items=700000,nodes_init=4,rev_write=True,sdk_timeout=60,vbuckets=128,deep_copy=True,GROUP=vb128;P0
    test_basic_create_read,num_items=700000,nodes_init=4,rev_read=True,sdk_timeout=60,vbuckets=128,deep_copy=True,GROUP=vb128;P0
    test_basic_create_read,num_items=700000,nodes_init=4,rev_write=True,rev_read=True,deep_copy=True,sdk_timeout=60,vbuckets=128,GROUP=vb128;P0
    test_basic_create_read,num_items=700000,nodes_init=4,key_size=22,sdk_timeout=60,vbuckets=128,GROUP=vb128;P0
    test_basic_create_read,num_items=700000,nodes_init=4,key_size=12,sdk_timeout=60,vbuckets=128,GROUP=vb128;P0
    test_basic_create_read,num_items=700000,nodes_init=1,key_size=12,sdk_timeout=60,doc_size=20,vbuckets=128,GROUP=vb128;P0
    test_basic_create_read,num_items=700000,nodes_init=2,key_size=240,sdk_timeout=60,vbuckets=128,doc_size=200,process_concurrency=4,GROUP=vb128;P0
    test_basic_create_read,num_items=700000,nodes_init=2,key_size=22,mix_key_size=True,sdk_timeout=60,vbuckets=128,doc_size=20,process_concurrency=4,GROUP=vb128;P0

    #Adding temp, just to verify with larger key size keytree size should exceed seq tree size
    test_basic_create_read,num_items=700000,nodes_init=2,key_size=232,mix_key_size=True,sdk_timeout=60,vbuckets=128,doc_size=20,process_concurrency=4,GROUP=vb128;P0

################################################################################

    # 512 vbuckets
    # 6.25 million items
    # 25 MB per vbucket

    test_basic_create_read,num_items=1250000,nodes_init=4,key_size=240,sdk_timeout=60,vbuckets=512,process_concurrency=4,GROUP=vb512;P0
    test_basic_create_read,num_items=1250000,nodes_init=4,key_size=20,randomize_doc_size=True,sdk_timeout=60,vbuckets=512,GROUP=vb512;P0
    test_basic_create_read,num_items=1250000,nodes_init=4,sdk_timeout=60,doc_size=0,vbuckets=512,GROUP=vb512;P0
    test_basic_create_read,num_items=1250000,nodes_init=2,key_size=22,mix_key_size=True,sdk_timeout=60,vbuckets=512,doc_size=20,process_concurrency=4,GROUP=vb512;P0

    #Adding temp, just to verify with larger key size keytree size should exceed seq tree size
    test_basic_create_read,num_items=1250000,nodes_init=2,key_size=232,mix_key_size=True,sdk_timeout=60,vbuckets=512,doc_size=20,process_concurrency=4,GROUP=vb512;P0
    test_basic_create_read,num_items=1250000,nodes_init=4,key_size=232,sdk_timeout=60,doc_size=0,vbuckets=512,GROUP=vb512;P0

################################################################################

    # 1024 vbuckets
    # 25 million items
    # 50 MB per vbucket

    test_basic_create_read,num_items=5000000,nodes_init=4,key_size=22,sdk_timeout=60,fragmentation=50,GROUP=vb1024;P0
    test_basic_create_read,num_items=5000000,nodes_init=4,mix_key_size=True,key_size=20,sdk_timeout=60,process_concurrency=4,GROUP=vb1024;P0
    test_basic_create_read,num_items=5000000,nodes_init=4,randomize_doc_size=True,key_size=20,sdk_timeout=60,GROUP=vb1024;P0
    test_basic_create_read,num_items=5000000,nodes_init=4,key_size=22,sdk_timeout=60,fragmentation=30,GROUP=vb1024;P0
    test_basic_create_read,num_items=5000000,nodes_init=4,key_size=22,sdk_timeout=60,fragmentation=80,GROUP=vb1024;P0
    test_basic_create_read,num_items=5000000,nodes_init=4,random_key=True,key_size=22,sdk_timeout=60,deep_copy=True,GROUP=vb1024;P0
    test_basic_create_read,num_items=5000000,nodes_init=4,rev_write=True,sdk_timeout=60,deep_copy=True,GROUP=vb1024;P0
    test_basic_create_read,num_items=5000000,nodes_init=4,rev_read=True,sdk_timeout=60,deep_copy=True,GROUP=vb1024;P0
    test_basic_create_read,num_items=5000000,nodes_init=4,rev_read=True,rev_write=True,deep_copy=True,sdk_timeout=60,GROUP=vb1024;P0
    test_basic_create_read,num_items=5000000,nodes_init=2,key_size=22,mix_key_size=True,sdk_timeout=60,doc_size=20,process_concurrency=4,GROUP=vb1024;P0
    test_basic_create_read,num_items=5000000,nodes_init=2,key_size=240,sdk_timeout=60,doc_size=200,process_concurrency=4,GROUP=vb1024;P0

################################################################################

    # 64 vbuckets
    # 32 million items
    # 1 GB per vbucket

    #1GB per vbucket, 64 vbuckets , 32 million items
    test_basic_create_read,num_items=6400000,nodes_init=4,rev_write=True,rev_read=True,deep_copy=True,sdk_timeout=60,vbuckets=64,GROUP=vb64;P0
    test_basic_create_read,num_items=6400000,nodes_init=4,randomize_doc_size=True,sdk_timeout=60,vbuckets=64,GROUP=vb64;P0
    test_basic_create_read,num_items=6400000,nodes_init=1,key_size=12,sdk_timeout=60,vbuckets=64,doc_size=20,GROUP=vb64;P0

################################################################################
